name: Go Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags

permissions:
  contents: write  # Allow writing to GitHub releases

env:
  # 使用仓库名作为项目名
  PROJECT_NAME: ${{ github.event.repository.name }}
  # 获取当前日期
  BUILD_DATE: ${{ github.ref_name }}-${{ github.run_id }}

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整的 Git 历史

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'  # 使用 go.mod 文件指定 Go 版本
        cache: true  # 启用依赖缓存

    - name: Get dependencies
      run: go mod download

    - name: Prepare Release Directory
      run: mkdir -p release

    - name: Build Linux AMD64
      run: >
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build 
        -ldflags="-X 'main.Version=${{ github.ref_name }}' 
                  -X 'main.BuildDate=${{ env.BUILD_DATE }}'" 
        -o release/${{ env.PROJECT_NAME }}_${{ env.BUILD_DATE }}_linux_amd64

    - name: Build Linux ARM64
      run: >
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build 
        -ldflags="-X 'main.Version=${{ github.ref_name }}' 
                  -X 'main.BuildDate=${{ env.BUILD_DATE }}'" 
        -o release/${{ env.PROJECT_NAME }}_${{ env.BUILD_DATE }}_linux_arm64

    - name: Build Windows AMD64
      run: >
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build 
        -ldflags="-X 'main.Version=${{ github.ref_name }}' 
                  -X 'main.BuildDate=${{ env.BUILD_DATE }}'" 
        -o release/${{ env.PROJECT_NAME }}_${{ env.BUILD_DATE }}_windows_amd64.exe

    - name: Build Windows ARM64
      run: >
        CGO_ENABLED=0 GOOS=windows GOARCH=arm64 go build 
        -ldflags="-X 'main.Version=${{ github.ref_name }}' 
                  -X 'main.BuildDate=${{ env.BUILD_DATE }}'" 
        -o release/${{ env.PROJECT_NAME }}_${{ env.BUILD_DATE }}_windows_arm64.exe

    - name: Build macOS AMD64
      run: >
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build 
        -ldflags="-X 'main.Version=${{ github.ref_name }}' 
                  -X 'main.BuildDate=${{ env.BUILD_DATE }}'" 
        -o release/${{ env.PROJECT_NAME }}_${{ env.BUILD_DATE }}_darwin_amd64

    - name: Build macOS ARM64
      run: >
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build 
        -ldflags="-X 'main.Version=${{ github.ref_name }}' 
                  -X 'main.BuildDate=${{ env.BUILD_DATE }}'" 
        -o release/${{ env.PROJECT_NAME }}_${{ env.BUILD_DATE }}_darwin_arm64

    - name: Create Source Code Tarball
      run: |
        tar -czvf release/${{ env.PROJECT_NAME }}_${{ env.BUILD_DATE }}_source.tar.gz \
        --exclude=.git \
        --exclude=release \
        .

    - name: Create Source Code Zip
      run: |
        zip -r release/${{ env.PROJECT_NAME }}_${{ env.BUILD_DATE }}_source.zip \
        . \
        -x .git\* \
        -x release\*

    - name: Generate SHA256 Checksums
      run: |
        cd release
        sha256sum * > ${{ env.PROJECT_NAME }}_${{ env.BUILD_DATE }}_checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v2
      env:
        # 使用 GitHub Token 进行身份验证和发布
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          release/*
        generate_release_notes: true  # 自动生成发行说明
        draft: false  # 不创建草稿
        prerelease: false  # 不标记为预发布