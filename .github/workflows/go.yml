name: Go Build and Release

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                goos: [linux, windows, darwin]
                goarch: [amd64, arm64]

        steps:
            # 检出代码
            - name: Checkout code
              uses: actions/checkout@v3

            # 设置 Go 环境
            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: 1.23.1

            # 缓存 Go 依赖
            - name: Cache Go modules
              uses: actions/cache@v3
              with:
                  path: ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            # 安装 Go 依赖
            - name: Install dependencies
              run: |
                  go mod tidy

            # 设置交叉编译
            - name: Build project for ${{ matrix.goos }}-${{ matrix.goarch }}
              run: |
                  mkdir -p ./bin/${{ matrix.goos }}-${{ matrix.goarch }}
                  GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ./bin/${{ matrix.goos }}-${{ matrix.goarch }}/bronyaBot

            # 列出文件，检查二进制文件是否生成
            - name: List files in ./bin
              run: ls -al ./bin/

            # 上传二进制文件和压缩包作为 Artifact
            - name: Create tar.gz archive
              run: |
                  tar -czvf ./bin/${{ github.sha }}.tar.gz -C ./bin .
            - name: Create zip archive
              run: |
                  zip -r ./bin/${{ github.sha }}.zip ./bin

            - name: Upload binaries and archives
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ env.VERSION_TAG }}
                  files: |
                      ./bin/*
                      ./bin/${{ github.sha }}.tar.gz
                      ./bin/${{ github.sha }}.zip
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    release:
        needs: build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            # 创建 GitHub Release 标签（项目名 + 时间戳）
            - name: Create GitHub release tag
              id: create_release
              run: |
                  VERSION_TAG="BronyaBot-$(date +'%Y%m%d%H%M%S')"
                  echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  git tag $VERSION_TAG
                  git push origin $VERSION_TAG
